// Margin Padding Mixin
@mixin space($type, $direction, $amount) {
	@if($type == margin) {
		@if($direction == all) {
			margin: $amount;
		} @else if($direction == top) {
			margin-top: $amount;
		} @else if($direction == bottom) {
			margin-bottom: $amount;
		} @else if($direction == left) {
			margin-left: $amount;
		} @else {
			margin-right: $amount;
		} 
	}
	@else {
		@if($direction == all) {
			padding: $amount;
		} @else if($direction == top) {
			padding-top: $amount;
		} @else if($direction == bottom) {
			padding-bottom: $amount;
		} @else if($direction == left) {
			padding-left: $amount;
		} @else {
			padding-right: $amount;
		} 
	}
}

// Media Screen MIxin

// A map of breakpoints.
$global_breakpoints: (
	xs: 576px,
	sm: 768px,
	md: 992px,
	lg: 1200px
);

// Respond above media screen
@mixin respond-above($breakpoint) {
	
	// If the breakpoint exists in the map.
	@if(map-has-key($global_breakpoints, $breakpoint)) {

		// Get the breakpoint value.
		$breakpoint-value: map-get($global_breakpoints, $breakpoint);

		// Write the media query.
		@media (min-width: $breakpoint-value) {
	      	@content;  
	    }
	}
	@else {

		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// Respond below media screen
@mixin respond-below($breakpoint) {
	
	@if(map-has-key($global_breakpoints, $breakpoint)) {

		$breakpoint-value: map-get($global_breakpoints, $breakpoint);

		@media (max-width: ($breakpoint-value - 1)) {
			@content;
		}
	}
	@else {

		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// Respond between media screen 
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($global_breakpoints, $lower) and map-has-key($global_breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($global_breakpoints, $lower);
    $upper-breakpoint: map-get($global_breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($global_breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($global_breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

// Font Mixin
@mixin font_size($value : 10) {
	font-size: $value + px;
	font-size: (0.1 * $value) + rem;
}

// Line Height Mixin
@mixin line_height($value : 10) {
	line-height: $value + px;
	line-height: (0.1 * $value) + rem;
}

// Absolute Position Mixin
@mixin absolute_position($top: auto, $right: auto, $bottom: auto, $left: auto) {
	position: absolute;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

// DISPLAY FLEX
@mixin flexbox {
	display: flex;
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
}

// Border Mixin
@mixin border($width: 1px, $style: solid, $color: transparent) {
	border-width: $width;
	border-style: $style;
	border-color: $color;
}

// BORDER RADIUS
@mixin border-radius($width) {
	border-radius: $width;
	-moz-border-radius: $width;
    -webkit-border-radius: $width;
    -khtml-border-radius: $width;
}

// Single side border radius
@mixin single_border_radius($top_left, $top_right, $bottom_left, $bottom_right) {
	
	border-top-left-radius : $top_left;
	-moz-border-radius: $top_left;
	-webkit-border-radius: $top_left;
    -khtml-border-radius: $top_left;

	border-top-right-radius: $top_right;
	-moz-border-top-right-radius: $top_right;
    -webkit-border-top-right-radius: $top_right;
    -khtml-border-top-right-radius: $top_right;

	border-bottom-left-radius : $bottom_left;
	-moz-border-bottom-left-radius: $bottom_left;
    -webkit-border-bottom-left-radius: $bottom_left;
    -khtml-border-bottom-left-radius: $bottom_left; 

	border-bottom-right-radius: $bottom_right;
	-moz-border-bottom-right-radius: $bottom_right;
    -webkit-border-bottom-right-radius: $bottom_right;
    -khtml-border-bottom-right-radius: $bottom_right;
}



